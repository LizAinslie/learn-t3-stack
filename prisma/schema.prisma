// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id String  @id @default(cuid())
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String? // @db.Text
  access_token String? // @db.Text
  expires_at Int?
  token_type String?
  scope String?
  id_token String? // @db.Text
  session_state String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id String @id @default(cuid())
  sessionToken String @unique
  userId String
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id String @id @default(cuid())
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  accounts Account[]
  sessions Session[]
  ownedServers Server[]
  ownedTextChannels TextChannel[]
  sentTextMessages TextMessage[]
}

model VerificationToken {
  identifier String
  token String @unique
  expires DateTime

  @@unique([identifier, token])
}

model Server {
  id String @id @default(cuid())
  name String
  ownerId String
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
}

model TextChannel {
  id String @id @default(cuid())
  name String
  messages TextMessage[]
  createdTimestamp DateTime @default(now())
  ownerId String
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // todo: server-channel relationships
  // serverId String
  // server Server @relation()

  @@index([ownerId])
}

model TextMessage {
  id String @id @default(cuid())
  content String
  createdTimestamp DateTime @default(now())
  //Todo: editedTimestamp DateTime?
  channelId String
  channel TextChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([channelId])
  @@index([authorId])
}
